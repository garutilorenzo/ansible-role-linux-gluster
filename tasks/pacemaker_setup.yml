---

- name: check if pcs cluster exist
  ansible.builtin.shell: >
     pcs cluster status | 
     grep Online
  ignore_errors: yes
  register: pcs_cluster_status

- block:
    - name: Ensure passlib installed
      ansible.builtin.pip:
        name: 
          passlib

    - name: Change hacluster user password
      ansible.builtin.user:
        name: hacluster
        update_password: always
        password: "{{ hacluster_password | password_hash('sha512') }}"

    - name: enable cluster services
      ansible.builtin.service: 
        name: "{{ item }}" 
        state: restarted 
        enabled: yes
      with_items: ['pcsd','corosync', 'pacemaker', 'nfs-ganesha']

    - name: destroy all cluster
      ansible.builtin.command: pcs cluster destroy

    - name: pcs host auth
      ansible.builtin.command: pcs host auth {{ list_remote_cluster | map('quote') | join(' ') }} -u hacluster -p {{ hacluster_password }}
      run_once: true

    - name: pcs cluster setup
      ansible.builtin.command:  pcs cluster setup HA-NFS --start {{ list_remote_cluster | map('quote') | join(' ') }}
      run_once: true

    - name: Start pcs cluster
      ansible.builtin.command:  pcs cluster start --all
      run_once: true

    - name: enable pcs cluster
      ansible.builtin.command:  pcs cluster enable --all
      run_once: true

    - name: set stonith-enabled to false
      ansible.builtin.command: pcs property set stonith-enabled=false
      run_once: true

    - name: create pcs resource nfs_server
      ansible.builtin.command: pcs resource create nfs_server systemd:nfs-ganesha op monitor interval=10s
      run_once: true

    - name: create pcs resource nfs_ip
      ansible.builtin.command: pcs resource create nfs_ip ocf:heartbeat:IPaddr2 ip={{ gluster_vip_ip }} cidr_netmask=24 op monitor interval=10s
      run_once: true

    # # OCI
    # - name: Ensure oci-cli installed
    #   ansible.builtin.pip:
    #     name: 
    #       oci-cli

    # - name: create pcs resource nfs_ip
    #   ansible.builtin.command: pcs resource create nfs_ip ocivip secondary_private_ip={{ gluster_vip_ip }} op monitor interval=10s
    #   run_once: true

    - name: create nfs_group resource
      ansible.builtin.command: pcs resource group add nfs_group nfs_server nfs_ip
      run_once: true
  when: pcs_cluster_status.rc == 1